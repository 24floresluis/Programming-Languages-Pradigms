Observe the following Haskell REPL session:

Prelude> let multiply op1 op2 = op1 * op2
multiply :: Num a => a -> a -> a
Prelude>

Explain the details the REPL reported between the two Prelude> lines.


**Answer**

This reads as there is some type a in the typeclass Num, multiply takes two a's and returns another a.
In other words a can be any type in the typeclass of Num such as Integer, Double, Int, Float etc. Multiply will then take two of those a and return a single a.