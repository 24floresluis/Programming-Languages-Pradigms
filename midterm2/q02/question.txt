What are good reasons or situations to use recursion? What are some of the limitations of using recursion. Is recursion the best option to support immutability?

Recursion is often used in tandem with immutability as a way to iterate over a list. This is because the standard way of iterating or repeatedly applying something is with a for loop which inherently requires mutability. Recursion is also used in dynamic programming, breaking up a problem into smaller sub-problems and storing those solutions before combining later. A classic example of this that uses recursion are the more efficient divide and conquer algorithms for sorting, MergeSort and QuickSort. These algorithms are faster than non-recursive alternatives.

It does have some limitations, however. Unresolved recursive calls end up on the stack, so an un-optimized program could encounter a stack overflow as these calls build up if the machine does not have enough memory. This can be corrected with a proper implementation of tail call optimization, but this is language-dependent. Recursion is also less syntactically clear, it is not as easy to another programmer to understand a recursive function compared to an imperative function.

When using immutability, recursion may not always be the best option. For example, when using python you can utilize the iter() method as a built in object that iterates one element at a time. This way you can avoid recursion altogether and have cleaner, more efficient code. In Haskell, you can take advantage of functions like mapM to apply some kind of function over a list and get results. This too is preferable to recursion since it is more elegant and efficient, as it does not require recursive calls.